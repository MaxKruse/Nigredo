var namespaceinternal =
[
    [ "result_of", "structinternal_1_1result__of.html", null ],
    [ "result_of< F(Args...)>", "structinternal_1_1result__of_3_01_f_07_args_8_8_8_08_4.html", "structinternal_1_1result__of_3_01_f_07_args_8_8_8_08_4" ],
    [ "basic_buffer", "classinternal_1_1basic__buffer.html", "classinternal_1_1basic__buffer" ],
    [ "container_buffer", "classinternal_1_1container__buffer.html", "classinternal_1_1container__buffer" ],
    [ "error_handler", "structinternal_1_1error__handler.html", "structinternal_1_1error__handler" ],
    [ "named_arg_base", "structinternal_1_1named__arg__base.html", "structinternal_1_1named__arg__base" ],
    [ "named_arg", "structinternal_1_1named__arg.html", "structinternal_1_1named__arg" ],
    [ "is_named_arg", "structinternal_1_1is__named__arg.html", null ],
    [ "is_named_arg< named_arg< T, Char > >", "structinternal_1_1is__named__arg_3_01named__arg_3_01_t_00_01_char_01_4_01_4.html", null ],
    [ "string_value", "structinternal_1_1string__value.html", "structinternal_1_1string__value" ],
    [ "custom_value", "structinternal_1_1custom__value.html", "structinternal_1_1custom__value" ],
    [ "value", "classinternal_1_1value.html", "classinternal_1_1value" ],
    [ "init", "structinternal_1_1init.html", "structinternal_1_1init" ],
    [ "arg_map", "classinternal_1_1arg__map.html", "classinternal_1_1arg__map" ],
    [ "context_base", "classinternal_1_1context__base.html", "classinternal_1_1context__base" ],
    [ "get_type", "structinternal_1_1get__type.html", "structinternal_1_1get__type" ],
    [ "format_string_traits", "structinternal_1_1format__string__traits.html", null ],
    [ "format_string_traits_base", "structinternal_1_1format__string__traits__base.html", "structinternal_1_1format__string__traits__base" ],
    [ "format_string_traits< Char * >", "structinternal_1_1format__string__traits_3_01_char_01_5_01_4.html", null ],
    [ "format_string_traits< const Char * >", "structinternal_1_1format__string__traits_3_01const_01_char_01_5_01_4.html", null ],
    [ "format_string_traits< Char[N]>", "structinternal_1_1format__string__traits_3_01_char[_n]_4.html", null ],
    [ "format_string_traits< const Char[N]>", "structinternal_1_1format__string__traits_3_01const_01_char[_n]_4.html", null ],
    [ "format_string_traits< std::basic_string< Char > >", "structinternal_1_1format__string__traits_3_01std_1_1basic__string_3_01_char_01_4_01_4.html", null ],
    [ "format_string_traits< S, typename std::enable_if< std::is_base_of< basic_string_view< typename S::char_type >, S >::value >::type >", "structinternal_1_1format__string__traits_3_01_s_00_01typename_01std_1_1enable__if_3_01std_1_1is_061512d7df8ede3c900f71ad96023162.html", null ],
    [ "is_format_string", "structinternal_1_1is__format__string.html", null ],
    [ "is_compile_string", "structinternal_1_1is__compile__string.html", null ],
    [ "fp", "classinternal_1_1fp.html", "classinternal_1_1fp" ],
    [ "function", "structinternal_1_1function.html", [
      [ "result", "structinternal_1_1function_1_1result.html", "structinternal_1_1function_1_1result" ]
    ] ],
    [ "dummy_int", "structinternal_1_1dummy__int.html", "structinternal_1_1dummy__int" ],
    [ "checked", "structinternal_1_1checked.html", "structinternal_1_1checked" ],
    [ "char_traits", "structinternal_1_1char__traits.html", null ],
    [ "char_traits< char >", "structinternal_1_1char__traits_3_01char_01_4.html", "structinternal_1_1char__traits_3_01char_01_4" ],
    [ "char_traits< wchar_t >", "structinternal_1_1char__traits_3_01wchar__t_01_4.html", "structinternal_1_1char__traits_3_01wchar__t_01_4" ],
    [ "null_terminating_iterator", "classinternal_1_1null__terminating__iterator.html", "classinternal_1_1null__terminating__iterator" ],
    [ "counting_iterator", "classinternal_1_1counting__iterator.html", "classinternal_1_1counting__iterator" ],
    [ "truncating_iterator", "classinternal_1_1truncating__iterator.html", "classinternal_1_1truncating__iterator" ],
    [ "int_traits", "structinternal_1_1int__traits.html", null ],
    [ "basic_data", "structinternal_1_1basic__data.html", null ],
    [ "decimal_formatter", "classinternal_1_1decimal__formatter.html", "classinternal_1_1decimal__formatter" ],
    [ "decimal_formatter_null", "classinternal_1_1decimal__formatter__null.html", "classinternal_1_1decimal__formatter__null" ],
    [ "no_thousands_sep", "structinternal_1_1no__thousands__sep.html", "structinternal_1_1no__thousands__sep" ],
    [ "add_thousands_sep", "classinternal_1_1add__thousands__sep.html", "classinternal_1_1add__thousands__sep" ],
    [ "null", "structinternal_1_1null.html", null ],
    [ "format_string_traits< S, typename std::enable_if< std::is_base_of< compile_string, S >::value >::type >", "structinternal_1_1format__string__traits_3_01_s_00_01typename_01std_1_1enable__if_3_01std_1_1is_f8d1e294c4cbafa4d9a1e2d305967863.html", null ],
    [ "int_type_checker", "classinternal_1_1int__type__checker.html", "classinternal_1_1int__type__checker" ],
    [ "float_type_checker", "classinternal_1_1float__type__checker.html", "classinternal_1_1float__type__checker" ],
    [ "char_specs_checker", "classinternal_1_1char__specs__checker.html", "classinternal_1_1char__specs__checker" ],
    [ "cstring_type_checker", "classinternal_1_1cstring__type__checker.html", "classinternal_1_1cstring__type__checker" ],
    [ "arg_formatter_base", "classinternal_1_1arg__formatter__base.html", "classinternal_1_1arg__formatter__base" ],
    [ "custom_formatter", "classinternal_1_1custom__formatter.html", "classinternal_1_1custom__formatter" ],
    [ "is_integer", "structinternal_1_1is__integer.html", "structinternal_1_1is__integer" ],
    [ "width_checker", "classinternal_1_1width__checker.html", "classinternal_1_1width__checker" ],
    [ "precision_checker", "classinternal_1_1precision__checker.html", "classinternal_1_1precision__checker" ],
    [ "specs_setter", "classinternal_1_1specs__setter.html", "classinternal_1_1specs__setter" ],
    [ "specs_checker", "classinternal_1_1specs__checker.html", "classinternal_1_1specs__checker" ],
    [ "auto_id", "structinternal_1_1auto__id.html", null ],
    [ "specs_handler", "classinternal_1_1specs__handler.html", "classinternal_1_1specs__handler" ],
    [ "arg_ref", "structinternal_1_1arg__ref.html", "structinternal_1_1arg__ref" ],
    [ "dynamic_format_specs", "structinternal_1_1dynamic__format__specs.html", "structinternal_1_1dynamic__format__specs" ],
    [ "dynamic_specs_handler", "classinternal_1_1dynamic__specs__handler.html", "classinternal_1_1dynamic__specs__handler" ],
    [ "width_adapter", "structinternal_1_1width__adapter.html", "structinternal_1_1width__adapter" ],
    [ "precision_adapter", "structinternal_1_1precision__adapter.html", "structinternal_1_1precision__adapter" ],
    [ "id_adapter", "structinternal_1_1id__adapter.html", "structinternal_1_1id__adapter" ],
    [ "format_string_checker", "classinternal_1_1format__string__checker.html", "classinternal_1_1format__string__checker" ],
    [ "format_type", "structinternal_1_1format__type.html", null ],
    [ "formatbuf", "classinternal_1_1formatbuf.html", "classinternal_1_1formatbuf" ],
    [ "test_stream", "structinternal_1_1test__stream.html", null ],
    [ "is_streamable", "classinternal_1_1is__streamable.html", null ],
    [ "int_checker", "structinternal_1_1int__checker.html", null ],
    [ "int_checker< true >", "structinternal_1_1int__checker_3_01true_01_4.html", null ],
    [ "printf_precision_handler", "classinternal_1_1printf__precision__handler.html", "classinternal_1_1printf__precision__handler" ],
    [ "is_zero_int", "classinternal_1_1is__zero__int.html", "classinternal_1_1is__zero__int" ],
    [ "make_unsigned_or_bool", "structinternal_1_1make__unsigned__or__bool.html", null ],
    [ "make_unsigned_or_bool< bool >", "structinternal_1_1make__unsigned__or__bool_3_01bool_01_4.html", "structinternal_1_1make__unsigned__or__bool_3_01bool_01_4" ],
    [ "arg_converter", "classinternal_1_1arg__converter.html", "classinternal_1_1arg__converter" ],
    [ "char_converter", "classinternal_1_1char__converter.html", "classinternal_1_1char__converter" ],
    [ "printf_width_handler", "classinternal_1_1printf__width__handler.html", "classinternal_1_1printf__width__handler" ],
    [ "is_like_std_string", "classinternal_1_1is__like__std__string.html", null ],
    [ "is_like_std_string< fmt::basic_string_view< Char > >", "structinternal_1_1is__like__std__string_3_01fmt_1_1basic__string__view_3_01_char_01_4_01_4.html", null ],
    [ "conditional_helper", "structinternal_1_1conditional__helper.html", null ],
    [ "is_range_", "structinternal_1_1is__range__.html", null ],
    [ "is_range_< T, typename std::conditional< false, conditional_helper< decltype(internal::declval< T >().begin()), decltype(internal::declval< T >().end())>, void >::type >", "structinternal_1_1is__range___3_01_t_00_01typename_01std_1_1conditional_3_01false_00_01condition3cb3b849b8281fb701deab896849f46a.html", null ],
    [ "is_tuple_like_", "classinternal_1_1is__tuple__like__.html", null ],
    [ "integer_sequence", "structinternal_1_1integer__sequence.html", "structinternal_1_1integer__sequence" ],
    [ "make_integer_sequence", "structinternal_1_1make__integer__sequence.html", null ],
    [ "make_integer_sequence< T, 0, Ns...>", "structinternal_1_1make__integer__sequence_3_01_t_00_010_00_01_ns_8_8_8_4.html", null ]
];