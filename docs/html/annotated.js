var annotated =
[
    [ "Catch", "namespace_catch.html", "namespace_catch" ],
    [ "fmt", "namespacefmt.html", "namespacefmt" ],
    [ "FMT_BEGIN_NAMESPACE", "namespace_f_m_t___b_e_g_i_n___n_a_m_e_s_p_a_c_e.html", null ],
    [ "internal", "namespaceinternal.html", "namespaceinternal" ],
    [ "Nigredo", "namespace_nigredo.html", "namespace_nigredo" ],
    [ "spdlog", "namespacespdlog.html", "namespacespdlog" ],
    [ "std", "namespacestd.html", "namespacestd" ],
    [ "utils", "namespaceutils.html", null ],
    [ "Albedo", "class_albedo.html", "class_albedo" ],
    [ "align_spec", "structalign__spec.html", "structalign__spec" ],
    [ "arg_formatter", "classarg__formatter.html", "classarg__formatter" ],
    [ "arg_join", "structarg__join.html", "structarg__join" ],
    [ "back_insert_range", "classback__insert__range.html", "classback__insert__range" ],
    [ "basic_cstring_view", "classbasic__cstring__view.html", "classbasic__cstring__view" ],
    [ "basic_fixed_buffer", "classbasic__fixed__buffer.html", "classbasic__fixed__buffer" ],
    [ "basic_format_arg", "classbasic__format__arg.html", "classbasic__format__arg" ],
    [ "basic_format_args", "classbasic__format__args.html", "classbasic__format__args" ],
    [ "basic_format_context", "classbasic__format__context.html", "classbasic__format__context" ],
    [ "basic_format_specs", "classbasic__format__specs.html", "classbasic__format__specs" ],
    [ "basic_memory_buffer", "classbasic__memory__buffer.html", "classbasic__memory__buffer" ],
    [ "basic_parse_context", "classbasic__parse__context.html", "classbasic__parse__context" ],
    [ "basic_printf_context", "classbasic__printf__context.html", "classbasic__printf__context" ],
    [ "basic_string_view", "classbasic__string__view.html", "classbasic__string__view" ],
    [ "basic_writer", "classbasic__writer.html", "classbasic__writer" ],
    [ "buffer_context", "structbuffer__context.html", "structbuffer__context" ],
    [ "buffered_file", "classbuffered__file.html", "classbuffered__file" ],
    [ "char8_t", "structchar8__t.html", "structchar8__t" ],
    [ "compile_string", "structcompile__string.html", null ],
    [ "convert_to_int", "structconvert__to__int.html", "structconvert__to__int" ],
    [ "convert_to_int< T, Char, void >", "structconvert__to__int_3_01_t_00_01_char_00_01void_01_4.html", null ],
    [ "custom_daily_file_name_calculator", "structcustom__daily__file__name__calculator.html", null ],
    [ "custom_ex", "structcustom__ex.html", null ],
    [ "dynamic_formatter", "classdynamic__formatter.html", "classdynamic__formatter" ],
    [ "empty_spec", "structempty__spec.html", null ],
    [ "error_code", "classerror__code.html", "classerror__code" ],
    [ "failing_sink", "classfailing__sink.html", "classfailing__sink" ],
    [ "file", "classfile.html", "classfile" ],
    [ "fill_spec", "classfill__spec.html", "classfill__spec" ],
    [ "float_spec_handler", "structfloat__spec__handler.html", "structfloat__spec__handler" ],
    [ "format_arg_store", "classformat__arg__store.html", "classformat__arg__store" ],
    [ "format_args", "structformat__args.html", "structformat__args" ],
    [ "format_args_t", "structformat__args__t.html", "structformat__args__t" ],
    [ "format_context_t", "structformat__context__t.html", "structformat__context__t" ],
    [ "format_error", "classformat__error.html", "classformat__error" ],
    [ "format_handler", "structformat__handler.html", null ],
    [ "format_int", "classformat__int.html", "classformat__int" ],
    [ "format_spec", "classformat__spec.html", "classformat__spec" ],
    [ "format_to_n_result", "structformat__to__n__result.html", "structformat__to__n__result" ],
    [ "formatter", "structformatter.html", "structformatter" ],
    [ "formatter< arg_join< It, Char >, Char >", "structformatter_3_01arg__join_3_01_it_00_01_char_01_4_00_01_char_01_4.html", "structformatter_3_01arg__join_3_01_it_00_01_char_01_4_00_01_char_01_4" ],
    [ "formatter< RangeT, Char, typename std::enable_if< fmt::is_range< RangeT >::value >::type >", "structformatter_3_01_range_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__range_338ef07b6d6c7537efaa2c888f2ea4c8d.html", "structformatter_3_01_range_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__range_338ef07b6d6c7537efaa2c888f2ea4c8d" ],
    [ "formatter< std::tm, Char >", "structformatter_3_01std_1_1tm_00_01_char_01_4.html", "structformatter_3_01std_1_1tm_00_01_char_01_4" ],
    [ "formatter< T, Char, typename std::enable_if< internal::format_type< typename buffer_context< Char >::type, T >::value >::type >", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1format__typeef2b7d59b5441fbead72290e06693dea.html", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1format__typeef2b7d59b5441fbead72290e06693dea" ],
    [ "formatter< T, Char, typename std::enable_if< internal::is_streamable< T, Char >::value &&!internal::format_type< typename buffer_context< Char >::type, T >::value >::type >", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1is__streamabdfe791f5d6e0a8acd43f884d0761b8af.html", "structformatter_3_01_t_00_01_char_00_01typename_01std_1_1enable__if_3_01internal_1_1is__streamabdfe791f5d6e0a8acd43f884d0761b8af" ],
    [ "formatter< TupleT, Char, typename std::enable_if< fmt::is_tuple_like< TupleT >::value >::type >", "structformatter_3_01_tuple_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__tuple__a8a88f793f5f612c28a21643fc88182d.html", "structformatter_3_01_tuple_t_00_01_char_00_01typename_01std_1_1enable__if_3_01fmt_1_1is__tuple__a8a88f793f5f612c28a21643fc88182d" ],
    [ "formatting_base", "structformatting__base.html", "structformatting__base" ],
    [ "formatting_range", "structformatting__range.html", "structformatting__range" ],
    [ "formatting_tuple", "structformatting__tuple.html", "structformatting__tuple" ],
    [ "is_contiguous", "structis__contiguous.html", null ],
    [ "is_contiguous< internal::basic_buffer< Char > >", "structis__contiguous_3_01internal_1_1basic__buffer_3_01_char_01_4_01_4.html", null ],
    [ "is_contiguous< std::basic_string< Char > >", "structis__contiguous_3_01std_1_1basic__string_3_01_char_01_4_01_4.html", null ],
    [ "is_range", "structis__range.html", null ],
    [ "is_tuple_like", "structis__tuple__like.html", null ],
    [ "locale", "classlocale.html", "classlocale" ],
    [ "locale_provider", "classlocale__provider.html", "classlocale__provider" ],
    [ "monostate", "structmonostate.html", null ],
    [ "my_type", "structmy__type.html", "structmy__type" ],
    [ "no_formatter_error", "structno__formatter__error.html", null ],
    [ "output_range", "classoutput__range.html", "classoutput__range" ],
    [ "printf_arg_formatter", "classprintf__arg__formatter.html", "classprintf__arg__formatter" ],
    [ "printf_context", "structprintf__context.html", "structprintf__context" ],
    [ "printf_formatter", "structprintf__formatter.html", "structprintf__formatter" ],
    [ "rgb", "structrgb.html", "structrgb" ],
    [ "system_error", "classsystem__error.html", "classsystem__error" ],
    [ "u8string_view", "classu8string__view.html", "classu8string__view" ],
    [ "wformat_args", "structwformat__args.html", "structwformat__args" ]
];